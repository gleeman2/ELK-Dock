input {
  tcp {
    port => 514
    type => syslog
  }
  udp {
    port => 514
    type => syslog
  }
}

filter{
  if([type]=="syslog") {
        grok{
                match=>{
                        "message"=>"%{SYSLOG5424PRI}%{TIMESTAMP_ISO8601:Time_Executed} %{PROG:IsilonArray}%{GREEDYDATA:Details}"
                }
             }
        }
        if([IsilonArray]!="audit_protocol"){
                grok{
                        match=>{
                                "Details"=>"%{SPACE}%{SYSLOGPROG}: %{USER:AD_user}\|%{BASE10NUM}\|%{IP:Client_IP}\|%{WORD:Task}\|(?<Remainder>.*)"
                        }
                        remove_field=>[Details]
                }
				if ("FAILED" in [Remainder]){
				  grok {
				    match =>{
					  "Remainder" => ["(?<Progress>.*)\:%{BASE10NUM:Failed_ID}\|%{WORD:Object}\|%{GREEDYDATA:Affected_Item}", "(?<Progress>.*)\:%{BASE10NUM:Failed_ID}"]
					}
					remove_field=>[Remainder]
				  }
				}
				else {
				  grok {
				    match =>{
					  "Remainder" => "(?<Progress>.*)\|%{WORD:Object}\|%{GREEDYDATA:Affected_Item}"
					}
					remove_field => [Remainder]
				  }
				}
        }
        if([IsilonArray]=="audit_protocol"){
                grok{
                        match=>{
                                "Details"=>"%{EXIM_PID:PID}: %{USER:AD_user}\|%{BASE10NUM}\|%{IP:Client_IP}\|%{WORD:Task}\|(?<Progress>.*)\|%{WORD:Object}\|%{GREEDYDATA:Affected_Item}"
                        }
                        remove_field=>[Details]
                }
                mutate{
                        replace => { "IsilonArray" => "ISLarray02"}
                }
        }
		if ("last message repeated" in [message]) {
		  drop {}
		}
  }
  if ([Task] == "RENAME") {
    grok {
        match => { "Affected_Item" => "(?<Old_Location>.*)\|(?<New_Location>.*)"
        }
        remove_field => [Affected_Item]
    }
  }
  if ([Process] == "USER_LOGIN_SUCCESS") {
    grok {
        match => { "Description" => "User %{QUOTEDSTRING} successfully logged in from IP %{IP:User_IP}"
        }
    }
  }
  translate{
        field => "AD_user"
        dictionary_path => "/opt/logstash/ad_filter/ADUserSid.csv"
        destination => "AD_user_translated"
        fallback => "%{AD_user}"
  }
  translate{
        field => "AD_user_translated"
        dictionary_path => "/opt/logstash/ad_filter/ADUserSid-manual.csv"
        destination => "AD_user_translated"
        fallback => "%{AD_user_translated}"
        override => true
  }
  if [message] == "default send string" {
    drop{}
  }
}

output {
   if ([type] == "syslog"){
    elasticsearch {
      hosts => ["{Elastic search Index01}:9200", "{Elastic search Index02}:9200", "{Elastic search Index03}:9200"]
      manage_template => false
      index => "<syslog-{now/d}>"
      user => storage_logstash_internal
      password => logstashpass
      ssl => true
      cacert => '/etc/logstash/certs/storage-kibana.{certificate server}.ca'
      ssl_certificate_verification => false
    }
    syslog {
     host => "{SplunkserverIP}"
     port => 514
    }
  }
 }
